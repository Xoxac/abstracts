# оформление кода на примере алгоритма Эвклида с документацией и тестами
import time


def get_nod(a, b):
    """Вычисляется наибольший общий делитель по алгоритму Эвклида для a и b.
    Алгоритм: на каждой итерации из большего вычитается меньшее, результат присваивается большей переменной.
    Когда a == b, это и есть НОД
    :param a: первое натуральное число
    :param b: второе натуральное число
    :return: НОД
    """
    while True:
        if a == b:
            return a
        if a > b:
            a = a - b
        else:
            b = b - a


def test_nod(func):
    # --- test 1 ---------
    a = 28
    b = 35
    res = func(a, b)
    if res == 7:
        print('test 1 - OK')
    else:
        print('test 1 - FAIL')

    # --- test 2 ---------
    a = 100
    b = 1
    res = func(a, b)
    if res == 1:
        print('test 2 - OK')
    else:
        print('test 2 - FAIL')

    # --- test 3 ---------
    a = 2
    b = 100000000
    st = time.time()
    res = func(a, b)
    et = time.time()
    dt = et - st
    if res == 2 and dt < 3:
        print(f'test 3 - OK, run time = {round(dt, 3)}')
    else:
        print('test 3 - FAIL')

test_nod(get_nod)

# как ускорить алгоритм Эвклида
# серия вычитаний есть вычисление остатка от деления большего на меньшее,
# так как вычитаниями мы смотрим, сколько раз меньшее входит в большее.
# пока меньшее число больше 0, большему присваиваем остаток от деления на меньшее и
# выводим большее число
# a = 18, b = 24
# b = 24 % 18 = 6
# a = 18 % 6 = 0
# 6 и есть НОД
def mod_get_nod(a, b):
    """Вычисляется наибольший общий делитель по быстрому алгоритму Эвклида для a и b.
    Алгоритм: на каждой итерации пока число больше 0б большее делится на меньшее,
    остаток от деления присваивается большей переменной.
    Когда остаток равен 0, выводим большее число - это и есть НОД
    :param a: первое натуральное число
    :param b: второе натуральное число
    :return: НОД
    """

    if a < b:
        a, b = b, a
    while b != 0:
        a, b = b, a % b
    return a

test_nod(mod_get_nod)