from defs import prin

# LIST
nums=[5,10,1,60,25,3]
z, *y, u = 1, 2, 3, 4, 5 # спомощью множественного присваивания
print(z, y, u) # 1 [2, 3, 4] 5
print("your list: ", nums)
print("length of list is: ", len(nums))
print("first element: ", nums[0])
print("last element: ", nums[-1])
print("maximum: ", max(nums))
print("minimum: ", min(nums))
print("summa of all elements: ", sum(nums))
print("reverse list: ", list(reversed(nums)))
print("sorted (increasing): ", sorted(nums))
print("sorted (decreasing): ", sorted(nums, reverse=True))
# change element :
nums[1]="text"
print("new list: ", nums)
# srez :
print("srez: ", nums[1: len(nums)-1])
# change a part :
nums[1:-1]=["A","B"]
print("new list: ", nums)
# list from 5 to 10:
nums=list(range(5,11))
print("list from 5 to 10: ", nums)
# delete elements :
nums[2:4]=[]
print("after deleting: ", nums)
nums+=[100]
print("after adding 100: ", nums)
nums=[200]+nums
print("after adding 200: ", nums)
# delete last element :
del nums[len(nums)-1]
print("after deleting last: ", nums)
# nechet :
nums=[2*k+1 for k in range(5)]
print("nechet: ", nums)
nums[2:2]=[8, 9]
print("nechet with 8 and 9 inserted: ", nums)
# list from text :
symbs=list("Python")
print(symbs)
print("first two symbols: ", symbs[:2])
print("another symbols:", symbs[2:])

# копировать списки лучше методом deepcopy

# TUPLE
A=(10,20,30) # создание (чтобы создать кортеж из одного элемента, после этого элемента следует поставить запятую — (1,))
print("A:", A)
B=("Python",(1,2))
print("B:", B)
C=A+B # сумма
print("C:", C)
C+=(100,) # "добавление" элемента в конец (кортеж - неизменяем, то есть, создаем новый кортеж)
print("C:", C)
C=C[:1]+C[2:] # "удаление" элемента. стратегия состоит в том, чтобы выполнить два среза и объединить их в новый кортеж
print("C:", C)
C=(200,)+C # "добавление" элемента в начало (кортеж - неизменяем, то есть, создаем новый кортеж)
print("C:", C)
C=("A","B")+C[3:] # "замена" элементов (кортеж ("A","B") объединяется со срезом C[3:], в который входят все элементы кортежа C, начиная с элемента с индексом 3)
print("C:", C)
C=C[:2]+(8,9)+C[2:] # "вставка" элементов (кортеж - неизменяем, то есть, создаем новый кортеж)
print("C:", C)
C=C[:2]+(7,)+C[3:] # "присваивание" значения элементу (кортеж - неизменяем, то есть, создаем новый кортеж)
print("C:", C)


# Умножение списков и кортежей на число
Alpha=5*[0]
print(Alpha) # [0, 0, 0, 0, 0]
Bravo=(1,)*3
print(Bravo) # (1, 1, 1)
Charlie=[1,2]*3
print(Charlie) # [1, 2, 1, 2, 1, 2]
Delta=[[1,2]]*3
print(Delta) # [[1, 2], [1, 2], [1, 2]]
Echo=4*(1,[2,3])
print(Echo) # (1, [2, 3], 1, [2, 3], 1, [2, 3], 1, [2, 3])
Foxtrot=([1]*2)*3
print(Foxtrot) # [1, 1, 1, 1, 1, 1]
Golf=([1]*2,)*3
print(Golf) # ([1, 1], [1, 1], [1, 1])


#  Создание вложенных списков

# Создание двумерного списка
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Создание двумерного списка с помощью генератора
matrix = ([col for col in range(3)] for row in range(3))

# Создание списка переменной длины с помощью генератора
data = (list(row) for row in [[1, 2, 3], [4, 5], [6, 7, 8, 9]])

# Создание двумерного списка с помощью list comprehension
matrix = [[row for col in range(3)] for row in range(3)]

# Создание списка переменной длины с помощью map
data = list(map(list, [[1, 2, 3], [4, 5], [6, 7, 8, 9]]))

# Создание списка переменной длины
data = [
    [1, 2, 3],
    [4, 5],
    [6, 7, 8, 9]
]


# МЕТОДЫ
# insert(), append() и extend()
# Если из списка вызывается метод append() и в качестве аргумента метода указан список,
# то этот список будет добавлен как элемент в исходный список (из которого вызывался метод).
# Если вместо метода append() в такой ситуации использовать метод extend(),
# то в исходный список добавляются элементы того списка, который указан аргументом метода.
A=[1,2]
A.append([3,4]) # [1,2,[3,4]]
A.extend([3,4]) # [1,2,3,4]
A.insert(1, 20) # [1, 20, 2]

# pop и remove
# метод pop() позволяет удалить из списка элемент с определенным индексом, а метод remove()
# позволяет удалить из списка элемент с определенным значением. Метод pop() возвращает результат —
# это значение удаляемого элемента. Если индекс не указан, то удаляется
# последний элемент в списке. Если вызывается метод remove(), то в этом списке будет удален
# первый слева элемент, значение которого совпадает со значением, переданным аргументом методу.
# Метод результат не возвращает.
A.pop(1) # [1]
A.remove(1) # [2]

# index() позволяет определить индекс элемента в списке. Значение элемента передается аргументом методу
# count() позволяет определить количество элементов с определенным значением в списке

# sort() или функция sorted().
# Если из списка вызвать метод sort() (без аргументов или с аргументом reverse=False),
# то список будет отсортирован в порядке возрастания. Чтобы список сортировался в порядке убывания,
# метод вызывают с аргументом reverse=True. Метод не возвращает результат.
# Функции sorted() при вызове в качестве аргумента передается список (который в результате вызова
# функции не меняется). Результатом функция возвращает новый отсортированный в порядке
# возрастания список. Если функции передать еще один аргумент reversed=True, то список-результат
# будет отсортирован в порядке убывания.
# * в функции sorted(list, reversed=True) list - позиционный, а reversed=True именованный агрументы




for i in range(len(nums)):
    nums.append(nums[i]+2)
print("added: ", nums)

# # print(lis[-2:2:-1])
# # print(lis[-2::-1])

nums.extend([2, 3])
print("extended: ", nums)

nums.insert(3, 88)
print("inserted object 88 to index 3: ", nums)

# map(function, list)
# имеем список с числами с плавающей точкой
# L = [3.3, 4.4, 5.5, 6.6]

# печатаем сам объект map
# print(map(round, L)) # к каждому элементу применяем функцию округления

print(list(map(float, nums)))

# Напишите программу, в которой создается и отображается список, со-
# держащий степени двойки (числа 2**0, 2**1, 2**2, 2**3 и так далее). Размер списка
# (количество чисел в списке) вводится пользователем с клавиатуры.
n = int(input("ins kol-vo vozvedenij: "))
L = [2**n for n in range(n)]
print(L)

# Напишите программу, создающую список из чисел, которые при де-
# лении на 5 дают в остатке 3. Отобразить этот список в прямом и обратном порядке.
lis = [2, 8, 7, 13, 18]
L = [k for k in lis if k%5==3]
print(L)
print(list(reversed(L)))


# Напишите программу, в которой на основе текста, введенного поль-
# зователем, создается кортеж. Затем на основе этого кортежа создается
# новый кортеж. В новый кортеж включаются равноотстоящие элементы,
# начиная с первого (с нулевым индексом). Например, в новый кортеж
# включаются элементы, отстоящие друг от друга на 3 позиции (элементы
# с индексами 0, 3, 6, 9 и так далее). Расстояние между элементами (при-
# ращение по индексу) вводится пользователем.
text = tuple(input('text: '))
n = int(input('rasst megdu elementami: '))
tu = ()
for i in range(0, len(text), n):
    tu += tuple(text[i])

tx = tuple(input('your text: '))
step = int(input('step: '))
print(tx)
tu = tx[::step]

# Напишите программу, в которой пользователь вводит целое число,
# а программа формирует кортеж, который состоит из цифр, входящих в это число.
# Предложите способы создания кортежа, при котором
# цифры, формирующие число, включаются в кортеж в прямом и обратном порядке.
l = tuple(list(input(str('ins numbers: '))))
lr = tuple()
for i in reversed(l):
    lr += tuple(i,)


n = tuple(input('num: '))
m = n[::-1]
print(n, m, sep='\n')

